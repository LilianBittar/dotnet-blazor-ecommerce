@inject IProductService ProductService;
@implements IDisposable 

@if (ProductService.products == null || ProductService.products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{

    <ul class="list-unstyled">
        @foreach (var product in ProductService.products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @GetPriceText(product)
                    </h5>
                </div>
            </li>
        }
    </ul>

    for (var i = 1; i <= ProductService.PageCount; i++)
    {
        <a class="btn
            @(i == ProductService.CurrentPage ? "btn-info" : "btn-outline-info")
            page-selection"
            href="/search/@ProductService.LastSearchText/@i">@i</a>
    }
}
@code
{
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count ==  0)
        {
            return string.Empty;
        }
        else if (variants.Count ==1)
        {
            return $"${variants[0].Price}";
        }
        decimal minPrice = variants.Min(variants => variants.Price);
        return $"Starting at ${minPrice}";
    }
}
